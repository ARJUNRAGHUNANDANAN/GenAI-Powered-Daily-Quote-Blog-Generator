# GeminiBlog/Modules/ModulePelicanController.py
# @arjunraghunandanan 2024

import os
import subprocess
from datetime import datetime

def generate_combined_markdown(quote: str, author: str,  poem: str, image: str, quote_source: str, poem_source: str, image_source: str, date: str) -> str:
    """Generates a combined markdown file content.
        quote: The fetched quote.
        author: The author of the quote.
        quote_source: The source of the quote.
        poem: The generated poem.
        image: The generated image file location.
        poem_source: The source of the poem.
        image_source: The source of the image.
        date: The date of the blog post.
    Returns A string representing the markdown content.
    """
    # Get today's date
    today = datetime.now().strftime("%d%B%Y%H%M%S")
    date_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Construct the markdown content
    markdown_content = f"""---
title: Quote for {today} - {author}
date: {date_str}
category: AI Generated Quotes
tags: {quote_source}; {poem_source} ; {image_source} inspiration; poetry by {poem_source} AI; {author}
slug: quote-{today}
authors: Gemini AI
summary: A daily dose of inspiration with a quote, poem, and image generated by AI.
---

# {today}
date: {date_str}
category: Inspirational Quote

# Quote of the Day
## {quote}
by **{author}**

Quote Source : {quote_source}

![pic_A1](media/{image})


> {poem}


### Disclaimer
'All Images, Poem and other content are fetched and modified by a Generative AI Application and should not be used as factual information. Use with Caution. Quotes and Author detail are taken from above cited sources '

This Article was generated using AI. These are the following services used to generate the current post
Quote Source : {quote_source}
Poem Source :  {poem_source}
Image Source : {image_source}
"""

    return markdown_content
def pelican_MDmedia_to_output():
    """Runs Pelican to generate HTML output from markdown and media files."""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    pelican_deployer_dir = os.path.join(current_dir, "_site")

    # Append to PATH if it doesn't exist
    user_home_directory = subprocess.check_output("echo ~", shell=True).decode("utf-8").strip()
    local_bin_path = os.path.join(user_home_directory, ".local", "bin")
    if local_bin_path not in os.environ["PATH"]:
        os.environ["PATH"] = os.environ["PATH"] + f":{local_bin_path}"
    
    # Run the Pelican command
    pelican_command = "make html"
    subprocess.run(pelican_command, cwd=pelican_deployer_dir, shell=True)
    return 0


if __name__ == "__main__":
    print("this program is not to be ran standalone")
